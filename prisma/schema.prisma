generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" 
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  username        String    @unique
  displayName           String
  email           String    @unique
  passwordHash         String
  googleOauthId   String?   @unique
  googleId              String?        @unique
  bio                   String?
  sessions              Session[]
  avatarUrl             String?
  isAdmin               Boolean        @default(false)
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  roles           UserRole[]
  posts           Post[]
  postApprovals   PostApproval[]
  comments        Comment[]
  bookmarks             Bookmark[]
  following             Follow[]       @relation("Following")
  followers             Follow[]       @relation("Followers")
  likes                 Like[]
  receivedNotifications Notification[] @relation("Recipient")
  issuedNotifications   Notification[] @relation("Issuer")

 @@map("users")
}


model Session {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Role {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  users UserRole[]
}

model UserRole {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId Int
}

model Post {
  id          String         @id @default(cuid())
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  content             String
  attachments         Media[]
  title       String
  hashtags    Json?
  mentions    Json?
  isPublished Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  approvals   PostApproval[]
  bookmarks           Bookmark[]
  comments    Comment[]
  likes       Like[]
  linkedNotifications Notification[]
  
  @@map("posts")
  
}

model Media {
  id     String    @id @default(cuid())
  postId String?
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}
enum MediaType {
  IMAGE
  VIDEO
}



model PostApproval {
  id          String   @id @default(cuid())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId      String
  approvedBy  User?    @relation(fields: [approvedById], references: [id], onDelete: SetNull)
  approvedById String?
  status      ApprovalStatus @default(PENDING)
  comment     String?
  updatedAt   DateTime  @updatedAt
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
}

model Comment {
  id        String   @id @default(cuid())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  content   String
  createdAt DateTime @default(now())
  @@map("comments")
}

model Like {
  id        String       @id @default(cuid())
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  targetId  String
  targetType LikeTargetType
  createdAt DateTime     @default(now())
  @@unique([userId, postId])
  @@map("likes")
}


enum LikeTargetType {
  POST
  COMMENT
}

model Bookmark {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, postId])
  @@map("bookmarks")
}


model Notification {
  id        String   @id @default(cuid())
  recipientId String
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
  issuerId    String
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  postId      String?
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  type        NotificationType
  read        Boolean          @default(false)
  userId    String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())


  @@map("notifications")
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

